npm install -g @vscode/vsce
vsce package

bugs
  one toggle creates two bookmarks

todo easy
  remove dupe symbols
  remove hashing
  put refresh menu item on files and folders

 todo hard
  auto scroll
    scroll to top for functions
    min top and bottom border lines
    don't scroll if mark visible in window
  hide all marks, restore on any edit
  add names to marks
    edit menu
    don't delete named marks so names preserved
    delete named tokens when X menu used

 todo impossible?
  invisible tokens
  toggle collapsed/expanded on file item click
  remove sidebar highlight when selection changes
  click in token to remove mark

not needed?
  command to go to last file on prev/next
  undo
  automatic suggestions based on visits
    count visits in each symbol block
    show in sidebar with question mark
    click on sidebar to accept and create bookmark
    limit suggestions (setting)
  
file types to add
  markdown

settings
  show bookmark word in token
  fall back to gen1 line number tracking
  max suggestion count
  smart scroll 
    scroll to top for functions
    don't scroll if mark visible in window
    dumb scroll top/middle/bottom/smart
    min num lines above and below selection
  max num of enclosing folder names
  clean trailing empty comments and whitespace
  open sidebar when adding mark
  files to ignore
  language types to ignore
  ignore .gitignore
  show in gutter
    gutter color
  show in scrollbar
    scrollbar color

testing
  moving a project folder

why gen2
  sticky
  smart sidebar
    pointers
    line numbers
    breadcrumbs
    compressed code
  smart scrolling


############################### ICONS ######################################

const vscode   = require('vscode');
const utils    = require('./utils.js');
const {log} = utils.getLog('labl');


settings: workbench.colorTheme   auto-detect color scheme
https://code.visualstudio.com/api/references/icons-in-labels
"https://github.com/microsoft/vscode-codicons/tree/main/src/icons"
"https://tabler.io/icons"
"https://lucide.dev/icons/"
"https://fontawesome.com/icons"

item.iconPath = new vscode.ThemeIcon("symbol-function"); // or...
item.iconPath = vscode.Uri.file("/path/to/icon.svg");    // or...
item.iconPath = { light: lightUri, dark: darkUri };

üìÑ üîñ ∆í üìÇ ‚úèÔ∏è üì¶ ‚ùî ‚¨ö ‚åÄ ‚Ä¶ ‚ùì ‚Üµ ‚èé ‚ê§ ‚Ä¢ ‚óè

() [] {} <> ÔºàÔºâ ÔºªÔºΩ ÔΩõÔΩù ÔºúÔºû ‚ü®‚ü© ‚åà‚åâ ‚åä‚åã ‚ü¶‚üß ‚üÆ‚üØ ‚¶É‚¶Ñ ‚ü¨‚ü≠ ‚ù≤‚ù≥ ‚ù¥‚ùµ ‚ßº‚ßΩ

‚Üµ ‚èé ‚ê§ ‚êç‚êä ¬∂ ¬¨ Ô∏ô ‚îÄ ‚îÇ ‚ïê ‚ïë

/*
// const codicons = {
//      1: "file",         2: "module",      3: "namespace",  4: "package",
//      5: "class",        6: "method",      7: "property",   8: "field",
//      9: "constructor", 10: "enum",       11: "interface", 12: "function",
//     13: "variable",    14: "constant",   15: "string",    16: "number",
//     17: "boolean",     18: "array",      19: "object",    20: "key",
//     21: "null",        22: "enummember", 23: "struct",    24: "event",
//     25: "operator",    26: "typeparameter"
// }

// ‚ùå	‚úñ

// const unicodeIcons = {
//   file: "üìÑ",          // U+1F4C4
//   function: "∆í ",      // U+0192
//   method: "üõ†Ô∏è",        // U+1F6E0
//   variable: "üìù",      // U+1F4DD
//   module: "üì¶",        // U+1F4E6
//   package: "üì¶",       // U+1F4E6
//   class: "üß±",         // U+1F9F1
//   constructor: "üèóÔ∏è",   // U+1F3D7
//   constant: "üîí",      // U+1F512
//   string: "üî§",        // U+1F524
//   number: "üî¢",        // U+1F522
//   boolean: "üîò",       // U+1F518
//   array: "üìö",         // U+1F4DA
//   object: "üß©",        // U+1F9E9
//   key: "üîë",           // U+1F511
//   null: "‚êÄ",           // U+2400
//   event: "üìÖ",         // U+1F4C5
//   operator: "‚ûï",      // U+2795   ‚ûñ ‚úñÔ∏è ‚ûó
// };

// function getIconForKind(kind) {
//   const codicon = codicons[kind];
//   if(!codicon) return '  ';
//   const char = unicodeIcons[codicon];
//   log('getIconForKind', codicon, char);
//   // return char ?? new vscode.ThemeIcon(codicon);
//   return char ?? '  ';
// };

'$(x)' ‚Üí ‚ùå
'$(trash)' ‚Üí üóëÔ∏è
'$(close)' ‚Üí ‚®â
'$(remove)' ‚Üí ‚õî

‚öô U+2699  Gear
‚åò U+2318  Place of Interest Sign (Command)
‚àû U+221E  Infinity
‚ú≥ U+2733  Eight Spoked Asterisk
‚òØ U+262F  Yin Yang
‚äï U+2295  Circled Plus
‚ãÜ U+22C6  Star Operator
‚éà U+2388  Helm Symbol

If you're using SVGs as iconPath, color is respected unless overridden by the theme.
But if you're using a ThemeIcon,
     VS Code handles the coloring and ignores any color in the SVG,
     since ThemeIcons are meant to match the theme's foreground color.
For TreeItems, SVGs with color will show as-is, unless you're trying to theme them.

codicons:
  triangle-down triangle-up triangle-right triangle-left
  chevron-right play send debug-hint debug-stackframe debug-start star star-full
  circle-large-outline pass-filled globe circle-filled circle-large-filled
  close-dirty debug-step-into debug-step-out export
  fold-down fold-up grabber layout-panel

--------------------- module calls --------------------
requires: cmd sidebar text marks utils

init:        provides glblFuncs ...
  cmd
  sidebar      updateSidebar
  text         addMarksForTokens
  marks
    text.addMarksForTokens 

calls
  cmd
    sidebar.updateSidebar
    text.toggle
    text.scrollToPrevNext
    text.clearFile
    text.cleanFile

  sidebar
    text.getLabel
    text.clearDecoration
    text.bookmarkClick
    marks.getGlobalMarks
    marks.delGlobalMark
    marks.waitForInit
  
  text
    marks.delGlobalMark
    marks.replaceGlobalMark
    marks.newMark
    marks.dumpGlobalMarks
    marks.addGlobalMarkIfMissing
    marks.delGlobalMarksForFile
  
  marks
    text.glblFuncs.addMarksForTokens *
    sidebar.glblFuncs.updateSidebar  *


--- hover over bookmark ----------

const markdown = new vscode.MarkdownString(
       `[Delete Bookmark](command:sticky-bookmarks`+
       `.deleteItemCmd?${encodeURIComponent(JSON.stringify([lineNumber]))})`);
markdown.isTrusted = true;

editor.setDecorations(decorationType, [
  {
    range: new vscode.Range(lineNumber, 0, lineNumber, 0),
    hoverMessage: markdown
  }
]);


--- show codelens with no bookmark ---

provideCodeLenses(document) {
  const lenses = [];
  const markedLines = new Set(marks.getMarksForFile(document.uri.fsPath).map(m => m.lineNumber));
  for (let i = 0; i < document.lineCount; i++) {
    if (!markedLines.has(i)) {
      lenses.push(new vscode.CodeLens(
        new vscode.Range(i, 0, i, 0),
        {
          title: '‚ûï Add Bookmark',
          command: 'sticky-bookmarks.addBookmark',
          arguments: [document.uri, i]
        }
      ));
    }
  }

  return lenses;
}

